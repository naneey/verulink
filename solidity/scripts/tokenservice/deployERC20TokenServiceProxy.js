import * as dotenv from "dotenv";
import { ethers, Wallet } from "ethers";
import Safe, { SafeFactory } from "@safe-global/protocol-kit";
import { EthersAdapter } from "@safe-global/protocol-kit";
import SafeApiKit from "@safe-global/api-kit";
import {CreateCallAbi, implementationABI, proxyABI} from "../ABI/ABI.js";

dotenv.config();

const SAFE_ADDRESS = process.env.SAFE_ADDRESS;
const provider = new ethers.providers.JsonRpcProvider(
    "https://eth-goerli.g.alchemy.com/v2/fLCeKO4GA9Gc3js8MUt9Djy7WHCFxATq"
);
const deployerSigner = new ethers.Wallet(process.env.secret_key1, provider);
const bytecode  = "0x6080604052604051610846380380610846833981810160405281019061002591906104e9565b818161003882825f61004160201b60201c565b5050505061072b565b6100508361007860201b60201c565b5f8251118061005c5750805b156100735761007183836100cd60201b60201c565b505b505050565b6100878161010060201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60606100f8838360405180606001604052806027815260200161081f602791396101c260201b60201c565b905092915050565b61010f8161029760201b60201c565b61014e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610145906105c3565b60405180910390fd5b806101807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b6102b960201b60201c565b5f015f6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606101d38461029760201b60201c565b610212576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161020990610651565b60405180910390fd5b5f808573ffffffffffffffffffffffffffffffffffffffff168560405161023991906106b3565b5f60405180830381855af49150503d805f8114610271576040519150601f19603f3d011682016040523d82523d5f602084013e610276565b606091505b509150915061028c8282866102c260201b60201c565b925050509392505050565b5f808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b5f819050919050565b606083156102d257829050610321565b5f835111156102e45782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610318919061070b565b60405180910390fd5b9392505050565b5f604051905090565b5f80fd5b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f61036282610339565b9050919050565b61037281610358565b811461037c575f80fd5b50565b5f8151905061038d81610369565b92915050565b5f80fd5b5f80fd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6103e18261039b565b810181811067ffffffffffffffff82111715610400576103ff6103ab565b5b80604052505050565b5f610412610328565b905061041e82826103d8565b919050565b5f67ffffffffffffffff82111561043d5761043c6103ab565b5b6104468261039b565b9050602081019050919050565b5f5b83811015610470578082015181840152602081019050610455565b5f8484015250505050565b5f61048d61048884610423565b610409565b9050828152602081018484840111156104a9576104a8610397565b5b6104b4848285610453565b509392505050565b5f82601f8301126104d0576104cf610393565b5b81516104e084826020860161047b565b91505092915050565b5f80604083850312156104ff576104fe610331565b5b5f61050c8582860161037f565b925050602083015167ffffffffffffffff81111561052d5761052c610335565b5b610539858286016104bc565b9150509250929050565b5f82825260208201905092915050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e5f8201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b5f6105ad602d83610543565b91506105b882610553565b604082019050919050565b5f6020820190508181035f8301526105da816105a1565b9050919050565b7f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f5f8201527f6e74726163740000000000000000000000000000000000000000000000000000602082015250565b5f61063b602683610543565b9150610646826105e1565b604082019050919050565b5f6020820190508181035f8301526106688161062f565b9050919050565b5f81519050919050565b5f81905092915050565b5f61068d8261066f565b6106978185610679565b93506106a7818560208601610453565b80840191505092915050565b5f6106be8284610683565b915081905092915050565b5f81519050919050565b5f6106dd826106c9565b6106e78185610543565b93506106f7818560208601610453565b6107008161039b565b840191505092915050565b5f6020820190508181035f83015261072381846106d3565b905092915050565b60e8806107375f395ff3fe608060405236601057600e6018565b005b60166018565b005b601e602c565b602a6026602e565b603a565b565b565b5f60356058565b905090565b365f80375f80365f845af43d5f803e805f81146054573d5ff35b3d5ffd5b5f60827f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5f1b60a9565b5f015f9054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b5f81905091905056fea2646970667358221220a8e7650e52d9ea2b044c1e14e7895c67f1213bd4bbea3c381509d29e77e0796964736f6c63430008160033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564";

  const tokenserviceimplementationAddress = process.env.tokenserviceimplementationAddress;
  const initializeData = new ethers.utils.Interface(implementationABI).encodeFunctionData("initialize", ["5", "0x0e27875afe33Ea44a9720fE0D70b1Cb9dc57aCC2", "20"]);

  const _data  = new ethers.utils.AbiCoder().encode(["address", "bytes"], [tokenserviceimplementationAddress, initializeData]);
  console.log("data: ", _data);
  console.log("bytecode: ", bytecode + _data.slice(2));
//   console.log("data1: ", _data.slice(2));
// Encode deployment
const deployerInterface = new ethers.utils.Interface(CreateCallAbi);
const deployCallData = deployerInterface.encodeFunctionData("performCreate", [
    0,
    bytecode + _data.slice(2)
]);

const ethAdapter = new EthersAdapter({
    ethers,
    signerOrProvider: deployerSigner,
});
const safeService = new SafeApiKit.default({
    txServiceUrl: "https://safe-transaction-goerli.safe.global",
    ethAdapter,
});

const txData = {
    to: process.env.CREATECALL_CONTRACT_ADDRESS,
    value: "0",
    data: deployCallData,
};
const safeSdk = await Safe.default.create({
    ethAdapter: ethAdapter,
    safeAddress: SAFE_ADDRESS,
});
const safeTx = await safeSdk.createTransaction({
    safeTransactionData: txData,
});
const safeTxHash = await safeSdk.getTransactionHash(safeTx);

const signature = await safeSdk.signTypedData(safeTx);
console.log("txn hash", safeTxHash);

const transactionConfig = {
    safeAddress: SAFE_ADDRESS,
    safeTransactionData: safeTx.data,
    safeTxHash: safeTxHash,
    senderAddress: process.env.SENDER_ADDRESS,
    senderSignature: signature.data,
};

await safeService.proposeTransaction(transactionConfig);
