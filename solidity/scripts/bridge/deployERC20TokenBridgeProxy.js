import * as dotenv from "dotenv";
import { ethers, Wallet } from "ethers";
import Safe, { SafeFactory } from "@safe-global/protocol-kit";
import { EthersAdapter } from "@safe-global/protocol-kit";
import SafeApiKit from "@safe-global/api-kit";
import {CreateCallAbi, implementationABI, proxyABI} from "../ABI/ABI.js";

dotenv.config();

const SAFE_ADDRESS = process.env.SAFE_ADDRESS;
const provider = new ethers.providers.JsonRpcProvider(
    "https://eth-goerli.g.alchemy.com/v2/fLCeKO4GA9Gc3js8MUt9Djy7WHCFxATq"
);
const deployerSigner = new ethers.Wallet(process.env.secret_key1, provider);
const bytecode  = "0x60806040526040516108783803806108788339818101604052810190610025919061051f565b81816100398282600061004260201b60201c565b5050505061074e565b6100518361007a60201b60201c565b60008251118061005e5750805b156100755761007383836100cf60201b60201c565b505b505050565b6100898161010260201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60606100fa8383604051806060016040528060278152602001610851602791396101c760201b60201c565b905092915050565b610111816102b860201b60201c565b610150576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610147906105fe565b60405180910390fd5b806101837f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b6102db60201b60201c565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606101d8846102b860201b60201c565b80156101f057506101ee336102b860201b60201c565b155b61022f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102269061066a565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168560405161025791906106d1565b600060405180830381855af49150503d8060008114610292576040519150601f19603f3d011682016040523d82523d6000602084013e610297565b606091505b50915091506102ad8282866102e560201b60201c565b925050509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b606083156102f557829050610345565b6000835111156103085782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033c919061072c565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061038b82610360565b9050919050565b61039b81610380565b81146103a657600080fd5b50565b6000815190506103b881610392565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610411826103c8565b810181811067ffffffffffffffff821117156104305761042f6103d9565b5b80604052505050565b600061044361034c565b905061044f8282610408565b919050565b600067ffffffffffffffff82111561046f5761046e6103d9565b5b610478826103c8565b9050602081019050919050565b60005b838110156104a3578082015181840152602081019050610488565b60008484015250505050565b60006104c26104bd84610454565b610439565b9050828152602081018484840111156104de576104dd6103c3565b5b6104e9848285610485565b509392505050565b600082601f830112610506576105056103be565b5b81516105168482602086016104af565b91505092915050565b6000806040838503121561053657610535610356565b5b6000610544858286016103a9565b925050602083015167ffffffffffffffff8111156105655761056461035b565b5b610571858286016104f1565b9150509250929050565b600082825260208201905092915050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b60006105e8602d8361057b565b91506105f38261058c565b604082019050919050565b60006020820190508181036000830152610617816105db565b9050919050565b7f416464726573733a20696e76616c69642064656c65676174652063616c6c0000600082015250565b6000610654601e8361057b565b915061065f8261061e565b602082019050919050565b6000602082019050818103600083015261068381610647565b9050919050565b600081519050919050565b600081905092915050565b60006106ab8261068a565b6106b58185610695565b93506106c5818560208601610485565b80840191505092915050565b60006106dd82846106a0565b915081905092915050565b600081519050919050565b60006106fe826106e8565b610708818561057b565b9350610718818560208601610485565b610721816103c8565b840191505092915050565b6000602082019050818103600083015261074681846106f3565b905092915050565b60f58061075c6000396000f3fe608060405236601057600e6018565b005b60166018565b005b601e602c565b602a6026602e565b603b565b565b565b600060366060565b905090565b3660008037600080366000845af43d6000803e8060008114605b573d6000f35b3d6000fd5b6000608c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b60b5565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600081905091905056fea26469706673582212207538dd3fdcbc9c29392e4f36fc7cab83726b86a2160d5599ea2e20d77be867ce64736f6c63430008130033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564";

  const tokenbridgeimplementationAddress = process.env.tokenbridgeimplementationAddress;
  const initializeData = new ethers.utils.Interface(implementationABI).encodeFunctionData("initialize", ["5", "0x0e27875afe33Ea44a9720fE0D70b1Cb9dc57aCC2"]);

  const _data  = new ethers.utils.AbiCoder().encode(["address", "bytes"], [tokenbridgeimplementationAddress, initializeData]);
  console.log("data: ", _data);
//   console.log("bytecode: ", bytecode + _data.slice(2));
  console.log("data1: ", _data.slice(2));
// Encode deployment
const deployerInterface = new ethers.utils.Interface(CreateCallAbi);
const deployCallData = deployerInterface.encodeFunctionData("performCreate", [
    0,
    bytecode + _data.slice(2)
]);

const ethAdapter = new EthersAdapter({
    ethers,
    signerOrProvider: deployerSigner,
});
const safeService = new SafeApiKit.default({
    txServiceUrl: "https://safe-transaction-goerli.safe.global",
    ethAdapter,
});

const txData = {
    to: process.env.CREATECALL_CONTRACT_ADDRESS,
    value: "0",
    data: deployCallData,
};
const safeSdk = await Safe.default.create({
    ethAdapter: ethAdapter,
    safeAddress: SAFE_ADDRESS,
});
const safeTx = await safeSdk.createTransaction({
    safeTransactionData: txData,
});
const safeTxHash = await safeSdk.getTransactionHash(safeTx);

const signature = await safeSdk.signTypedData(safeTx);
console.log("txn hash", safeTxHash);

const transactionConfig = {
    safeAddress: SAFE_ADDRESS,
    safeTransactionData: safeTx.data,
    safeTxHash: safeTxHash,
    senderAddress: process.env.SENDER_ADDRESS,
    senderSignature: signature.data,
};

await safeService.proposeTransaction(transactionConfig);
