import { BridgeContract } from "../artifacts/js/bridge";
import { CouncilContract } from "../artifacts/js/council";
import { Token_serviceContract } from "../artifacts/js/token_service";
import { Wrapped_tokenContract } from "../artifacts/js/wrapped_token";
import { evm2AleoArr, string2AleoArr } from "../test/utils";

function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

const setup = async () => {
  const bridge = new BridgeContract({
    networkName: "testnet3",
    privateKey: "APrivateKey1zkp8CZNn3yeCseEtxuVPbDCwSyhGW6yZKUYKfgXmcpoGPWH",
  });
  const tokenService = new Token_serviceContract({
    networkName: "testnet3",
    privateKey: "APrivateKey1zkp8CZNn3yeCseEtxuVPbDCwSyhGW6yZKUYKfgXmcpoGPWH",
  });
  const wrappedToken = new Wrapped_tokenContract({
    networkName: "testnet3",
    privateKey: "APrivateKey1zkp8CZNn3yeCseEtxuVPbDCwSyhGW6yZKUYKfgXmcpoGPWH",
  });
  const council = new CouncilContract({
    networkName: "testnet3",
    privateKey: "APrivateKey1zkp8CZNn3yeCseEtxuVPbDCwSyhGW6yZKUYKfgXmcpoGPWH",
    mode: "execute",
  });

  let tx;

  // Deploy contracts
  await bridge.deploy();
  await wrappedToken.deploy();
  await tokenService.deploy();
  tx = await council.deploy();
  await tx.wait();

  // Initialize council program with a single council member and 1/5 threshold
  const councilMember =
    "aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px";
  const councilThreshold = 1;
  await council.initialize(
    councilMember,
    councilMember,
    councilMember,
    councilMember,
    councilMember,
    councilThreshold
  );

  // Initialize bridge
  const attestor = "aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px"
  await council.initialize_bridge(
    1,
    attestor,
    attestor,
    attestor,
    attestor,
    attestor
  );

  // Initialize bridge
  await council.exec_initialize_bridge(
    1,
    attestor,
    attestor,
    attestor,
    attestor,
    attestor
  );

  await council.initialize_wrapped_token();
  await council.exec_initialize_wrapped_token();

  await council.initialize_token_service();
  await council.exec_initialize_token_service();

  const ethChainId = 1
  await council.add_new_token(
    string2AleoArr("Wrapped USDC", 32), // name
    string2AleoArr("USDC", 16), // symbol
    18, // decimal
    ethChainId,
    evm2AleoArr("0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48") // USDC address on Eth
  );
  await council.exec_add_new_token(
    string2AleoArr("Wrapped USDC", 32), // name
    string2AleoArr("USDC", 16), // symbol
    18, // decimal
    ethChainId,
    evm2AleoArr("0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48") // USDC address on Eth
  );

  // The address is generated by taking the hash of TokenInfo
  // TODO: create a function to get the address from the name
  // aleoProgramToAddress(program.aleo)
  // 
  const wUSDC = "aleo1zzy2c66uf46wvtxd0uck965mzj2cn7fn7dl9tgftw7tedl9f3cgsqhsgdz";
  const minimumTransfer = BigInt(100)

  await council.enable_new_token(wUSDC, minimumTransfer)
  await council. exec_enable_new_token(wUSDC, minimumTransfer);

  // TODO: token_service.address()
  await council.enable_service("aleo1r55t75nceunfds6chwmmhhw3zx5c6wvf62jed0ldyygqctckaurqr8fnd3");
  await council.exec_enable_service("aleo1r55t75nceunfds6chwmmhhw3zx5c6wvf62jed0ldyygqctckaurqr8fnd3");

  // Approve Ethereum Chain
  await council.approve_chain_bridge(ethChainId);
  await council.exec_approve_chain_bridge(ethChainId);

  const tsEthereum = "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
  await council.support_chain_ts(ethChainId, evm2AleoArr(tsEthereum));
  tx = await council.exec_support_chain_ts(ethChainId, evm2AleoArr(tsEthereum));
  tx.wait()

};

setup();
